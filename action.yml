name: 'Terraform Module Release Action'
description: 'Validates, tests, formats Terraform code and handles semantic versioning based on PR title'
author: 'actions@happypathway.com'
icon: 'bar-chart-2'
color: 'purple'

inputs:
  github-token:
    description: 'GitHub token for creating commits, tags, and releases'
    required: true
  working-directory:
    description: 'Directory containing Terraform code'
    required: false
    default: '.'

runs:
  using: "composite"
  steps:
    - name: Check for skip flags
      shell: bash
      id: skip-check
      run: |
        SKIP_TEST=false
        COMMIT_MSG="${{ github.event.pull_request.title }} ${{ github.event.pull_request.body }}"
        if [[ $COMMIT_MSG =~ \[skip[[:space:]]*ci\]|\[skip[[:space:]]*test\] ]]; then
          SKIP_TEST=true
        fi
        echo "skip_test=$SKIP_TEST" >> $GITHUB_OUTPUT

    - name: Terraform Init
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: terraform init

    - name: Terraform Validate
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: terraform validate

    - name: Terraform Test
      if: steps.skip-check.outputs.skip_test != 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: terraform test

    - name: Terraform Format
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: terraform fmt -recursive

    - name: Check for formatting changes
      shell: bash
      id: git-check
      run: |
        if [[ -n "$(git status --porcelain)" ]]; then
          echo "changes=true" >> $GITHUB_OUTPUT
        else
          echo "changes=false" >> $GITHUB_OUTPUT
        fi

    - name: Commit formatting changes
      if: steps.git-check.outputs.changes == 'true'
      shell: bash
      id: commit-format
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add .
        git commit -m "style: Terraform formatting changes [skip ci] [skip test]"
        git push
        echo "committed=true" >> $GITHUB_OUTPUT

    - name: Get Version Info from Event
      if: steps.git-check.outputs.changes != 'true' || steps.commit-format.outputs.committed != 'true'
      shell: bash
      id: version-info
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          MESSAGE=$(gh pr view --json title -q .title ${{ github.event.pull_request.number }})
        else
          MESSAGE=$(git log -1 --pretty=%B)
        fi
        
        if [[ $MESSAGE =~ ^(Major|Minor|Patch) ]]; then
          echo "increment=$(echo $MESSAGE | cut -d' ' -f1 | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
          echo "valid=true" >> $GITHUB_OUTPUT
        else
          echo "valid=false" >> $GITHUB_OUTPUT
          echo "::error::Commit message or PR title must start with 'Major:', 'Minor:', or 'Patch:'"
          exit 0
        fi
      env:
        GH_TOKEN: ${{ inputs.github-token }}

    - name: Get Latest Tag
      if: steps.version-info.outputs.valid == 'true'
      shell: bash
      id: get-latest-tag
      run: |
        git fetch --tags
        # Get all version tags and sort them numerically by version components
        LATEST_TAG=$(git tag -l | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | sed 's/^v//' | sort -t. -k1,1n -k2,2n -k3,3n | tail -n1)
        if [ -z "$LATEST_TAG" ]; then
          LATEST_TAG="0.0.0"
        fi
        
        # Check if any tags have v prefix to maintain consistency
        V_PREFIX_EXISTS=$(git tag -l | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | wc -l)
        if [ "$V_PREFIX_EXISTS" -gt 0 ]; then
          LATEST_TAG="v${LATEST_TAG}"
        fi
        echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "Found latest version: $LATEST_TAG" 

    - name: Calculate New Version
      if: steps.version-info.outputs.valid == 'true'
      shell: bash
      id: version
      run: |
        # Extract version number, handling both N.N.N and vN.N.N formats
        CURRENT_VERSION=$(echo "${{ steps.get-latest-tag.outputs.tag }}" | sed 's/^v//')
        # Save if original had v prefix
        [[ "${{ steps.get-latest-tag.outputs.tag }}" =~ ^v ]] && HAS_V_PREFIX=true || HAS_V_PREFIX=false
        
        if [[ ! $CURRENT_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "::error::Invalid version format: $CURRENT_VERSION"
          exit 1
        fi
        
        IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
        
        case "${{ steps.version-info.outputs.increment }}" in
          "major")
            NEW_VERSION="$((major + 1)).0.0"
            ;;
          "minor")
            NEW_VERSION="${major}.$((minor + 1)).0"
            ;;
          "patch")
            NEW_VERSION="${major}.${minor}.$((patch + 1))"
            ;;
          *)
            echo "::error::Invalid increment type: ${{ steps.version-info.outputs.increment }}"
            exit 1
            ;;
        esac
        
        if [[ ! $NEW_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "::error::Invalid new version format: $NEW_VERSION"
          exit 1
        fi
        
        # Maintain the same prefix style as the latest tag
        if [[ "$HAS_V_PREFIX" == "true" ]]; then
          echo "new_version=v${NEW_VERSION}" >> $GITHUB_OUTPUT
        else
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
        fi

    - name: Create and Push Tag
      if: steps.version-info.outputs.valid == 'true'
      shell: bash
      run: |
        if [[ ! "${{ steps.version.outputs.new_version }}" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "::error::Invalid version tag format: ${{ steps.version.outputs.new_version }}"
          exit 1
        fi
        git tag "${{ steps.version.outputs.new_version }}"
        git push origin "${{ steps.version.outputs.new_version }}"

    - name: Create GitHub Release
      if: steps.version-info.outputs.valid == 'true'
      shell: bash
      run: |
        if [[ ! "${{ steps.version.outputs.new_version }}" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "::error::Invalid version tag format for release: ${{ steps.version.outputs.new_version }}"
          exit 1
        fi
        gh release create "${{ steps.version.outputs.new_version }}" \
          --title "${{ steps.version.outputs.new_version }}" \
          --generate-notes
      env:
        GH_TOKEN: ${{ inputs.github-token }}
